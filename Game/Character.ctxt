#BlueJ class context
comment0.target=Character
comment0.text=\r\n\ The\ main\ character\ of\ the\ game.\ Contains\ the\ majority\ of\ game\ logic\ with\ regards\ to\ player\ input\r\n
comment1.params=
comment1.target=Character()
comment1.text=\r\n\ Creates\ a\ standard\ character\ and\ initialises\ it's\ sprites\ and\ sound\ effects\r\n
comment10.params=
comment10.target=void\ faceMouse()
comment10.text=\r\n\ Change\ character\ sprite\ to\ face\ in\ the\ same\ cardinal\ direction\ as\ the\ mouse\ cursor\r\n
comment11.params=x\ y
comment11.target=double\ relativeAngle(int,\ int)
comment11.text=\r\n\ Takes\ x/y\ co-ordinates\ of\ an\ actor\ and\ returns\ the\ angle\ between\ the\ character\ and\ actor\r\n\ @return\ angle\ in\ degrees,\ from\ 0\ (directly\ left),\ clockwise\ through\ 360\r\n
comment12.params=
comment12.target=boolean\ smoothBoundedMovement()
comment12.text=\r\n\ All\ movement\ logic,\ checks\ for\ keypresses,\ ensures\ character\ doesn't\ move\ through\ objects,\r\n\ uses\ floats\ to\ store\ a\ smooth\ movement\ which\ is\ converted\ to\ int\ for\ setLocation\r\n\ @return\ whether\ the\ character\ moved\ (used\ for\ animation)\r\n
comment13.params=
comment13.target=void\ createSprites()
comment13.text=\r\n\ Creates\ the\ animation\ pictures\ and\ put\ them\ in\ the\ animation\ arrays\r\n
comment14.params=
comment14.target=int\ getHP()
comment14.text=\r\n\ Returns\ the\ current\ HP\r\n
comment15.params=
comment15.target=int\ getMaxHP()
comment15.text=\r\n\ Returns\ the\ maximum\ HP\r\n
comment16.params=
comment16.target=void\ pickUp()
comment16.text=\r\n\ Check\ if\ there\ are\ any\ items\ in\ range\ of\ the\ character,\ if\ so\ picks\ them\ up\ and\ activates\ them\r\n
comment17.params=
comment17.target=void\ invulnerability()
comment17.text=\r\n\ Flashes\ the\ character\ sprite\ every\ 5\ frames\ while\ invulnerable\r\n
comment18.params=
comment18.target=void\ shakeWorld()
comment19.params=
comment19.target=void\ setWorld()
comment19.text=\r\n\ Sets\ the\ current\ world\ that\ the\ character\ resides\ in\r\n
comment2.params=
comment2.target=void\ act()
comment20.params=
comment20.target=int\ getUnmodifiedMeleeDamage()
comment21.params=
comment21.target=int\ getMeleeDamage()
comment22.params=
comment22.target=int\ getRangedDamage()
comment23.params=
comment23.target=float\ getRateOfFire()
comment24.params=
comment24.target=int\ getFireCooldown()
comment25.params=
comment25.target=int\ getSpeed()
comment26.params=
comment26.target=void\ doubleSpeed()
comment26.text=\r\n\ Applies\ the\ doubleSpeed\ powerup\r\n
comment27.params=
comment27.target=void\ revertSpeed()
comment27.text=\r\n\ Removes\ the\ doubleSpeed\ powerup\r\n
comment28.params=
comment28.target=void\ doubleDamage()
comment28.text=\r\n\ Applies\ the\ doubleDamage\ powerup\r\n
comment29.params=
comment29.target=void\ revertDamage()
comment29.text=\r\n\ Removes\ the\ doubleSpeed\ powerup\r\n
comment3.params=
comment3.target=void\ createSoundEffects()
comment3.text=\r\n\ Initialises\ references\ to\ each\ of\ the\ sound\ effects\ used\r\n
comment30.params=
comment30.target=void\ addHealth()
comment30.text=\r\n\ Increases\ current\ health\ by\ 10%\r\n
comment31.params=
comment31.target=void\ shield()
comment31.text=\r\n\ Activates\ the\ invicibility\ shield\r\n
comment32.params=
comment32.target=void\ deShield()
comment32.text=\r\n\ Removes\ the\ invincibility\ shield\r\n
comment33.params=
comment33.target=boolean\ isShielded()
comment34.params=
comment34.target=boolean\ isDead()
comment35.params=
comment35.target=void\ setFaded()
comment36.params=
comment36.target=boolean\ isFaded()
comment37.params=
comment37.target=int\ getRangeDamage()
comment38.params=
comment38.target=int\ getRPGDamage()
comment39.params=
comment39.target=boolean\ intersectingShootable()
comment39.text=\r\n\ Returns\ whether\ the\ character\ is\ currently\ intersecting\ an\ impassible\ object\r\n
comment4.params=
comment4.target=void\ fire()
comment4.text=\r\n\ Game\ logic\ for\ firing\ a\ bullet\r\n\ Checks\ if\ the\ key\ is\ pressed,\ whether\ there\ is\ ammo\ available,\ and\ creates\ the\ shot\ if\ everything\ is\ correct\r\n
comment40.params=
comment40.target=void\ boostHp()
comment40.text=\r\n\ Increases\ current\ and\ Max\ HP\ from\ a\ powerup\r\n
comment41.params=
comment41.target=void\ boostRangeDmg()
comment41.text=\r\n\ Boosts\ ranged\ damage\ from\ the\ powerup\r\n
comment42.params=
comment42.target=void\ boostROF()
comment42.text=\r\n\ Increases\ rate\ of\ fire\ from\ the\ powerup\r\n
comment43.params=
comment43.target=void\ boostSD()
comment43.text=\r\n\ Increases\ melee\ damage\ from\ the\ powerup\r\n
comment44.params=HP
comment44.target=void\ setHP(int)
comment45.params=maxHP
comment45.target=void\ setMaxHP(int)
comment46.params=damage
comment46.target=void\ setMeleeDamage(int)
comment47.params=damage
comment47.target=void\ setRangeDamage(int)
comment48.params=cooldown
comment48.target=void\ setFireCooldown(int)
comment5.params=
comment5.target=void\ fireRPG()
comment5.text=\r\n\ Game\ logic\ for\ firing\ the\ RPG\r\n\ Checks\ if\ the\ key\ is\ pressed,\ whether\ there\ is\ ammo\ available,\ and\ creates\ the\ shot\ if\ everything\ is\ correct\r\n
comment6.params=angle
comment6.target=void\ setKnockbackAngle(double)
comment6.text=\r\n\ Sets\ the\ current\ knockback\ angle\ of\ the\ player\r\n
comment7.params=damage
comment7.target=void\ takeDamage(int)
comment7.text=\r\n\ Check\ if\ the\ player\ can\ currently\ be\ damaged,\ and\ if\ so\ damages\ them\ and\ knocks\ them\ back,\ playing\ a\ hurt\ sound\r\n
comment8.params=distance
comment8.target=void\ knockback(int)
comment8.text=\r\n\ Logic\ for\ moving\ the\ character\ back\ forcefully\ after\ taking\ damage\r\n
comment9.params=
comment9.target=void\ initialiseLocation()
comment9.text=\r\n\ Initialises\ the\ character's\ location\ for\ float\ movement\ purposes\r\n
numComments=49
